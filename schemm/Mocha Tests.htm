<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet"
    href="http://nathansuniversity.com/css/mocha.css" />
  <script src=
    "http://nathansuniversity.com/js/jquery-1.7.1.min.js">
  </script>
  <script src=
    "http://nathansuniversity.com/js/chai.js">
  </script>
  <script src="http://nathansuniversity.com/js/mocha.js">
  </script>
  <script src="parser.js"></script>
  <script>mocha.setup('tdd')</script>
  <script>
var assert = chai.assert;

suite('parse', function() {
    test('a number', function() {
        assert.deepEqual(
            SCHEMM.parse('42'),
            42
        );
    });
    test('a variable', function() {
        assert.deepEqual(
            SCHEMM.parse('x'),
            'x'
        );
    });
});

// A half-baked implementation of evalScheem
var evalScheem = function (expr, env) {
    // Numbers evaluate to themselves
    if (typeof expr === 'number') {
        return expr;
    }
    // Strings are variable references
    if (typeof expr === 'string') {
        return env[expr];
    }
    // Look at head of list for operation
    switch (expr[0]) {
        case '+':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return evalScheem(expr[1], env) +
                   evalScheem(expr[2], env);
        case '-':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return evalScheem(expr[1], env) -
                   evalScheem(expr[2], env);
        case '*':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
			return evalScheem(expr[1], env) *
                   evalScheem(expr[2], env);
        case '/':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return evalScheem(expr[1], env) /
                   evalScheem(expr[2], env);
		case 'define':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
			if (env[expr[1]] === undefined) {
				env[expr[1]] = evalScheem(expr[2], env);
			}
			else {
				throw new Error(expr[1].concat(" is undefined"));
			}
            return 0;
        case 'set!':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
			if (env[expr[1]] === undefined) {
				throw new Error(expr[1].concat(" is undefined"));
			}
			else {
				env[expr[1]] = evalScheem(expr[2], env);
			}
            return 0;
		case 'begin':
			var i,res;
            for(i=1;i<expr.length;i++)
            {
                res = evalScheem(expr[i],env);
            }
            return res;
		case 'quote':
			if (expr.length !== 2) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return expr[1];
		case '<':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
           return ((evalScheem(expr[1], env) <
                    evalScheem(expr[2], env))) ? '#t':'#f';
		case '<=':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
           return ((evalScheem(expr[1], env) <=
                    evalScheem(expr[2], env))) ? '#t':'#f';
		case '=':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
           return ((evalScheem(expr[1], env) ===
                    evalScheem(expr[2], env))) ? '#t':'#f';
		case '>':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
           return ((evalScheem(expr[1], env) >
                    evalScheem(expr[2], env))) ? '#t':'#f';
		case '>=':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
           return ((evalScheem(expr[1], env) >=
                    evalScheem(expr[2], env))) ? '#t':'#f';
        case 'cons':
			if (expr.length !== 3) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return [evalScheem(expr[1],env)].concat(evalScheem(expr[2],env));
        case 'car':
			if (expr.length !== 2) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return evalScheem(expr[1],env)[0];
        case 'cdr':
			if (expr.length !== 2) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
			var v;
            v = evalScheem(expr[1],env);
            v.shift();
            return v;
		case 'if':
			if (expr.length !== 4) {
				throw new Error(expr.concat(" has wrong length for ".concat(expr[0])));
			}
            return (evalScheem(expr[1],env) === '#t') ? evalScheem(expr[2],env):evalScheem(expr[3],env);
    }
};

// Some unit tests

suite('Arithmetics', function() {
    test('a number', function() {
        assert.deepEqual(
            evalScheem(5, {}),
            5
        );
    });
    test('two plus three', function() {
        assert.deepEqual(
            evalScheem(['+',2,3], {}),
            5
        );
    });
    test('two times three', function() {
        assert.deepEqual(
            evalScheem(['*',2,3], {}),
            6
        );
    });
    test('one per two', function() {
        assert.deepEqual(
            evalScheem(['/',1,2], {}),
            1/2
        );
    });
    test('plus and divide then times', function() {
        assert.deepEqual(
            evalScheem(['*',['/',8,4],['+',1,1]], {}),
            4
        );
    });
});

suite('Variable', function() {
    test('a number', function() {
        assert.deepEqual(
            evalScheem(5, {'x': 5}),
            5
        );
    });
    test('a number', function() {
        assert.deepEqual(
            evalScheem('x',{'x': 5}),
            5
        );
    });
    test('two plus three', function() {
        assert.deepEqual(
            evalScheem(['+',2,3], {'x': 5}),
            5
        );
    });
    test('two times three', function() {
        assert.deepEqual(
            evalScheem(['*',2,3],{'x': 5}),
            6
        );
    });
    test('five times three', function() {
        assert.deepEqual(
            evalScheem(['*','y',3], {'y':5}),
            15
        );
    });
    test('plus then divide', function() {
        assert.deepEqual(
            evalScheem(['/','z',['+','x','y']], {'x':3,'y':2, 'z':25}),
            5
        );
    });
});

suite('Define & Set', function() {
    test('Begin 123', function() {
        assert.deepEqual(
            evalScheem(['begin',1,2,3], {}),
            3
        );
    });
    test('Begin 2+2', function() {
        assert.deepEqual(
            evalScheem(['begin',['+',2,2]], {}),
            4
        );
    });
    test('Begin x y x', function() {
        assert.deepEqual(
            evalScheem(['begin','x','y','x'],  {'x':3,'y':2, 'z':25}),
            3
        );
    });
    test('Begin Sentence', function() {
        assert.deepEqual(
            evalScheem(['begin',['define','x',5],['set!','x',['+','y','x']] ,'x'], {y:10}),
            15
        );
    });
});

suite('Quote', function() {
    test('Quote list', function() {
        assert.deepEqual(
            evalScheem(['quote',['+',2,3]], {}),
            ['+',2,3]
        );
    });
    test('Quote quote', function() {
        assert.deepEqual(
            evalScheem(['quote',['quote',['+',2,3]]], {}),
            ['quote',['+',2,3]]
        );
    });
});

suite('Logic', function() {
    test('Less than', function() {
        assert.deepEqual(
            evalScheem(['<',2,3], {}),
            '#t'
        );
    });
    test('Less than or equal', function() {
        assert.deepEqual(
            evalScheem(['<=',3,3], {}),
            '#t'
        );
    });
    test('Equal', function() {
        assert.deepEqual(
            evalScheem(['=',2,3], {}),
            '#f'
        );
    });
    test('More than or equal', function() {
        assert.deepEqual(
            evalScheem(['>=',3,3], {}),
            '#t'
        );
    });
    test('More than', function() {
        assert.deepEqual(
            evalScheem(['>',2,3], {}),
            '#f'
        );
    });
	test('If', function() {
        assert.deepEqual(
            evalScheem(['if',['=',1,1],['if',['=',2,3],10,11],12], {}),
            11
        );
    });
});

suite('List', function() {
    test('Cons', function() {
        assert.deepEqual(
            evalScheem(['cons',['quote',[1,2]],['quote',[3,4]]], {}),
            [[1,2],3,4]
        );
    });
    test('Car', function() {
        assert.deepEqual(
            evalScheem(['car',['quote',[[1,2],3,4]]], {}),
            [1,2]
        );
    });
     test('Cdr', function() {
        assert.deepEqual(
            evalScheem(['cdr',['quote',[[1,2],3,4]]], {}),
            [3,4]
        );
    });
});

suite('Errors', function() {
	test('Define error if defined', function() {
       assert.throws(function () {
            evalScheem(['begin',['define','x',3],['define','x',3]], {});
        });
    });
    test('Set error if undefined', function() {
       assert.throws(function () {
            evalScheem(['set!','x',3], {});
        });
    });
    test('Error for wrong number of atoms', function() {
       assert.throws(function () {
            evalScheem(['+',3], {});
        });
    });
});

  </script>
  <script>
    $(function(){
      mocha.run();
    });
  </script>
</head>
<body>
  <div id="mocha"></div>
</body>
</html>
